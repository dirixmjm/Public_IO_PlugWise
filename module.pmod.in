// -*- Pike -*-
// Copyright (c) 2009-2011, Marc Dirix, The Netherlands.
//                         <marc@dirix.nu>
//
// This script is open source software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation; either version 2, or (at your option) any
// later version.
//
// This module implements a way to interconnect pike with PlugWise modules.
// The module was not written by Plugwise B.V. nor are there any connections 
// between the author and Plugwise B.V. 

#pike __REAL_VERSION__
constant __version="1.0";
constant __author="Marc Dirix <marc@dirix.nu>";
constant __components=({"Public.pmod/IO.pmod/PlugWise.pmod"});

#define CIRCLEPLUS 0
#define CIRCLE 1
#define SWITCH 3
#define SCAN 4
#define SENSE 5


protected class _Stick
{


#define HEAD "\5\5\3\3"
#define FOOT "\r\n"
#define PW_PROTOCOL_DEBUG
#define PPW_PROTOCOL_DEBUG_LOW
#define RESEND 1
#define COMMANDTIMEOUT 1
#define ACKTIMEOUT 5

protected Thread.Mutex lock;
protected Stdio.File sock = Stdio.File();
object CirclePlus;
protected string StickMac="";

protected mapping Plugs = ([]);

protected string receive_buffer="";

void create( string port )
{

   if(!sock->open(port,"rw"))
      error("Can't open port %s\n",port);

   if(!sock->tcsetattr(
   ([ 
"BRKINT": 0,"CLOCAL": 1,"CREAD": 1,"CRTSCTS": 0,  "CSTOPB": 0,  "ECHO": 0,  "ECHOCTL": 0,  "ECHOE": 0,  "ECHOK": 0,  "ECHOKE": 0,  "ECHONL": 0,  "ECHOPRT": 0,  "FLUSHO": 0,  "HUPCL": 1,  "ICANON": 0,  "ICRNL": 0,  "IGNBRK": 0,  "IGNCR": 0,  "IGNPAR": 1,  "IMAXBEL": 0,  "INLCR": 0,  "INPCK": 0,  "ISIG": 0,  "ISTRIP": 0,  "IUCLC": 0,  "IXANY": 0,  "IXOFF": 0,  "IXON": 0,  "NOFLSH": 0,  "OCRNL": 0,  "OFDEL": 0,  "OFILL": 0,  "OLCUC": 0,  "ONLCR": 0,  "ONLRET": 0,  "ONOCR": 0,  "OPOST": 0,  "PARENB": 0,  "PARMRK": 0,  "PARODD": 0,  "PENDIN": 0,  "TOSTOP": 0,  "VDISCARD": 15,  "VEOF": 4,  "VEOL": 0,  "VEOL2": 0,  "VERASE": 127,  "VINTR": 3,  "VKILL": 21,  "VLNEXT": 22,  "VMIN": 1,  "VQUIT": 28,  "VREPRINT": 18,  "VSTART": 17,  "VSTOP": 19,  "VSUSP": 26,  "VSWTC": 0,  "VTIME": 10,  "VWERASE": 23,  "XCASE": 0,  "columns": 0,  "csize": 8,  "columns": 0,  "csize": 8,  "ispeed": 115200,  "ospeed": 115200,  "rows": 0      
   ])
      ))
   {
      error("Failed to initialize serial port\n");
   }
   sock->set_nonblocking(low_answer,0,0);
   send_command("",10);
   //INIT USB Stick
}

protected void low_answer( mixed id, string message )
{
   receive_buffer+=message;

   //Find newline in the buffer
   int bufferpointer = search(receive_buffer,"\n");
   while( bufferpointer > 0 )
   {
      string line = receive_buffer[..bufferpointer-1 ];
      receive_buffer=receive_buffer[bufferpointer+1..];
      bufferpointer = search(receive_buffer,"\n");

      if(has_prefix( line, "\203" ))
         line = line[1..];
      if(has_suffix( line, "\r" ) )
         line -= "\r"; 
      
      //The stick sends data that we don't use.
      if(!has_prefix(line, HEAD) )
         continue;

      //Remove the HEAD
      line = line[4..];
#ifdef PW_PROTOCOL_DEBUG_LOW
      werror("%O\n",line);
#endif
      //FIXME is there a better check if it is a message or an ACK?
      //COMMAND CALLOUT?
      seperate_data(line);
   }
}

protected void seperate_data( string message ) 
{
   int crc=0;
   //Set the stringpointer on the end of the first command.
   int command = -1;
   sscanf(message[..3],"%4x",command);
   //FIXME Error?
   if( command == -1 )
   {
      send_next();
      return;
   }
   //Check CRC
   sscanf(message[(strlen(message)-4)..],"%4x",crc);
   if ( crc != Public.Crypto.CRC.CRC16X()->calcstring(message[..(strlen(message)-5)]))
   {
      //FIXME Error Callback?
#ifdef PW_PROTOCOL_DEBUG
      werror("CRC Checksum failed on received data\n");
#endif
      send_next();
      return;
   }

   //This is an ACK from the Stick
   if( (command == 0) && sizeof(message) == 16 )
   {
      //Stick reports error
      if ( !( (message[8..11] == "00C1") || 
           (message[8..11] == "00E1")
           ))
      {
         werror("Stick Reports Error %O\n",message[8..11]);
         //Send next command
         send_next();
      }
      return;
   }
   string commandcounter = message[4..7];
   //FIXME command2
   string macaddr = message[8..23];
   string payload = message[24..(strlen(message)-5)];
   //Extract CRC
#ifdef PW_PROTOCOL_DEBUG
      werror("%d Received: %O\n",time(),message);
#endif
   //FIXME call_out?
   low_receive_callback(macaddr, command, payload);

   //Answer received, reset the command timer and send next command
   send_next();
}

protected mapping pendingcommand = ([]);
protected array transmitqueue = ({});

protected void send_command( string macaddress, string|int request, string|void data, int|void pos)
{
   string req = stringp(request)?request:sprintf("%04X",request);
   transmitqueue += ({ ([ "mac": macaddress, "request":req, "data": data?data:"", "pos":pos ]) });
   low_send();
}

protected void send_next()
{
   remove_call_out(receive_timeout);
   pendingcommand->time = 0;
   low_send();
}

protected void low_send()
{
   //Check if another command is pending.
   if( pendingcommand->time > time() )
   {
      return;
   }

   remove_call_out(receive_timeout);

   //Check if another command is queued
   if( !sizeof( transmitqueue ) )
   {
      return;
   }

   //pop command from queue
   string request = transmitqueue[0]->request;
   string payload = transmitqueue[0]->data;
   string position = transmitqueue[0]->pos;
   string macaddress = transmitqueue[0]->mac;
   pendingcommand = transmitqueue[0] + ([ "time": time() + COMMANDTIMEOUT ]);

   //Start the next command in case the plug is offline
   transmitqueue = transmitqueue[1..];
   string datagram = "";
   if ( position )
   {
     datagram = request + payload + macaddress;
   }
   else
     datagram = request + macaddress + payload;
#ifdef PW_PROTOCOL_DEBUG
   write("Send: %O\n", datagram + 
               sprintf("%04X",Public.Crypto.CRC.CRC16X()->calcstring(
                                             datagram)));
#endif

   sock->write(HEAD + datagram + 
               sprintf("%04X",Public.Crypto.CRC.CRC16X()->calcstring(
                                        datagram))+ FOOT);

   call_out( receive_timeout, COMMANDTIMEOUT );
   if( sizeof(receive_buffer) )
   {
      call_out(low_answer,0,0,"");
   }
}

void close()
{
   remove_call_out(receive_timeout);
   remove_call_out(send_command);
   sock->close();
}

   protected void receive_timeout( )
   {
   #ifdef PW_PROTOCOL_DEBUG
      werror("Receive Timeout for Plug: %s\n",pendingcommand->mac);
   #endif
      if( has_index ( Plugs, pendingcommand->mac ) )
         Plugs[pendingcommand->mac]->offline();
      //Send next command
      send_next();
   }


   protected void low_receive_callback( string mac, int command, string data )
   {
      switch(command)
      {
         //A device wants to join us?
         case 6:
         {
            werror("%s wants to join us\n",mac);
            //We are greedy here, and add all
            send_command(mac, 7, "01",1);
         }
         break;
         //Circle+ Response that Plug is Associated
         case 29:
         {
            string mac = data[0..15];
            int registered = (int) data[17];
            if( registered == 1 && ! has_index( Plugs, mac ) )
            {
               Plugs[ mac ]= _Circle(mac, send_command);
            }
         }
         break;
         //Plug Acknowledges its Association
         case 97:
         {
            //This is a new switch, send an info command
            //The switch has received the join accept
            send_command(mac, 35);
         }
         break;
         //Switch / Scan / Sense Report Active RF
         case 79:
         {
            //If not in our online database respond by requesting info.
            if( ! has_index( Plugs, mac ) )
            {
               send_command(mac, 35);
            }
            else
               Plugs[mac]->receive_callback(command, data);
         }
         break; 
         //Stick Returns Circle+ MAC on 000A Init.
         case 17:
         {
            //Stick Init Return Command, contains Stick Mac, Circle+ Mac
            StickMac = mac;
            string maccircleplus;
            sscanf(data,"%6*s%14s%*s",maccircleplus);
            maccircleplus = "00" + maccircleplus;
            CirclePlus = _CirclePlus(maccircleplus, send_command);
            //CirclePlus->find_plugs();
            Plugs[ maccircleplus ] = CirclePlus;
            break;
         }
         //Circle+ Returns Plug MAC if it is associated (and in reach?)
         case 25:
         {
            sscanf(data,"%16s%*s",string maccircle);
            if( !has_prefix(maccircle, "FFF") && !has_index(Plugs,maccircle ))
            {
               send_command( maccircle, 35 );
            }
         }
         break;
         //Return from info command
         case 36:
         {
            //If we get an info return, then the device must be in our network
            if( ! has_index( Plugs, mac ) )
            {
         
               switch(data[40..41])
               {
                  //01 is a Circle+ should not happen? 02 is a Circle
                  case "01":
                     error("We received an info return from an unknown C+ ??\n");
                     break;
                  case "02":
                     Plugs[mac]= _Circle(mac, send_command);
                     break;
                  case "03":
                     Plugs[mac]= _Switch(mac, send_command, 0 );
                     break;
                  case "05":
                     Plugs[mac]= _Sense(mac, send_command, 0 );
                     break;
                  case "06":
                     Plugs[mac]= _Scan(mac, send_command, 0 );
                     break;
                  default:
                     werror("Unknown Plug Type %s\n",data[40..41]);
               }
            }
            else
               Plugs[mac]->online = 1;
            Plugs[mac]->receive_callback(command, data);
         }
         break;
         default:
         {
            if( mac == StickMac )
            {
               werror("Received data for Unknown Command %d for Stick\n", command);
               werror("Data %O\n",data);
            }
            if( !has_index( Plugs, mac ) )
            {
               CirclePlus->isregistered( mac );
               return;
            }
            Plugs[mac]->receive_callback(command, data);
          }
      }
   }
   
   mixed `[]( string PlugMac )
   {
      if ( has_index( Plugs, PlugMac ) )
      {
         Plugs[PlugMac]->info();
         return Plugs[PlugMac];
      }
      //Software thinks we should know this plug, let's try and find it
      send_command( PlugMac, 35 );
   }

   mixed `->( string PlugMac )
   {
      if ( has_index( Plugs, PlugMac ) )
      {
         Plugs[PlugMac]->info();
         return Plugs[PlugMac];
      }
      //Software thinks we should know this plug, let's try and find it
      send_command( PlugMac, 35 );
   }

   array _indices( object|void context, int|void access )
   {
      return indices(Plugs);
   }

   array _values ( object|void context, int|void access )
   {
      return values(Plugs);
   }

   int _sizeof()
   {
      return sizeof(Plugs);
   }

   int `!()
   {
      return 0;
   }
} //END _Stick


//Initiate PlugWise as _Stick
_Stick `()(string port ) 
{
   return _Stick( port );
}


protected class _Circle
{
//! Callback function of the Stick to send commands.
protected function send_command;
//! Hardware Address of the Plug
protected string mac;
constant type = CIRCLE;
//! Calibration Values
protected float gain_a=0.0,gain_b=0.0,offtot=0.0,offnoise=0.0;
//! AC Frequency of the Powernet
int netfrequency =  0;
int powerstate = 0;
int builddate = 0;
int online = 0;
protected int plugtime = 0;
protected int lasttime = 0;
protected int logclock = 0;
//! Current Plug Pulse
protected float pulse;

string hwversion="";
//Pointerr to the address of the current log
protected int logpointer = 0;
//Address of the last log
int logaddress = 0;
protected function log_callback = 0;

void close()
{
   destruct(this);
}

//! Connect to a Plug in the PlugWise network.
//! Plugs have to be added to the network using the 
//! Microsoft windows tool provide by PlugWise B.V.
//! The Source.
//! 
//! @param port
//! The Protocol object returned from
//! earlier instantations of this PlugWise Network
//! make sure to reuse the Protocol object if possible
//! @param macaddress
//! The mac address of the plug, either the 5 byte, 6 byte or
//! full 16 byte mac works.
void create(string macaddress, function _send_command )
{
   mac = macaddress;
   send_command = _send_command;
   info();
}

protected int YMMtoUnix(string YMM)
{
   //Format is Year_Month_MonthMinute
   int year, month, minutes;
   sscanf(YMM,"%2x%2x%4x",year,month,minutes);
   year+=2000;
   if(!month ||  month > 12 )
      return 0;
   return Calendar.Year(year)->set_timezone("GMT")->month(month)->minute(minutes)->unix_time();
}

protected void power_calibrate()
{
   send_command(mac, 38 );
}

//! Retrieve the plug current clock in unix time.
//! @param sync
//! synchronize clock before returning
void clock( )
{
   string data = send_command(mac, 62, "" );
}

void offline()
{
   pulse = 0.0;
   online = 0;
}
   
//! Refresh the Plug info. No data is returned here, only the internal
//! representation of the Plug status like online,powerstate,time
//! net frequency and hardware version are recollected from the plug.
void info()
{
   send_command(mac, 35 );
} 

protected float pulse_correction(int pulse, int timespan)
{
   float pulses = pulse *1.0 / timespan;
   pulses = (timespan * (((pow(pulses / 1.0 + offnoise, 2.0) * gain_b) + 
                    ((pulses / 1.0 + offnoise) * gain_a)) + offtot));
   //return (pulses<0)?0.0:pulses;
   return pulses;
}

protected float pulse_to_watt(float pulse)
{
   return pulse * 1000/468.9385193;
}
   
protected float pulse_to_kwh(float pulse)
{
   return pulse /3600 /468.9385193;
}
 
//! Returns the logged power load on the plug.
//! The load on the plug is logged per hour in sets of four. 
//! Each log entry contains the total Pulses in the hour, so 
//! in order to get the power use the formula:
//! Pulses / 3600 / 468.9385193
//!
//! @param addr
//! the logaddress  which needs to be queried. The current logaddress
//! is Plug->logaddress. This however points to the current not completed 
//! log.
void log( int|void addr)
{
   info();
   int log = zero_type(addr)?logpointer:addr;
   send_command(mac, 72,sprintf("%08X",(log*32+278528)));
} 

int log_pointer()
{
   info();
   return logpointer;
}

void set_log_callback( function callback )
{
   log_callback = callback;
}

void remove_log_callback()
{
   log_callback = 0;
}

//! Switches the plug on.
//! info() is called internally, to update the state. No acknowledge 
//! is provided.
void on()
{
   send_command(mac,23, "01");
   //Update info
   info();
}

//! Switches the plug off.
//! info() is called internally, to update the state. 
//! No acknowledge is provided.
void off()
{
   send_command(mac, 23, "00");
   //Update info
   info();
}

void receive_callback(int command, string data )
{
   online=1;
   switch( command )
   {
   //This is an acknowledge
   case 0:
   {
   }
   break;
   //Response with current pulses
   case 19:
   {
      int val=0,val1=0;
      sscanf(data,"%04x%04x",val,val1);
      pulse = pulse_correction(val, 1);
   }
   break;
   //return code from info() command.
   case 36:
   {
      logclock = YMMtoUnix(data[0..7]);
      switch(data[18..19])
      {
      case "85":
         netfrequency=50;
         break;
      case "C5":
         netfrequency=60;
         break;
      default:
         netfrequency=0;
      }
      hwversion=data[20..31];
      sscanf(data[32..37],"%x",builddate);
      
      sscanf(data[8..15],"%x",int _logpointer);
      logpointer= (_logpointer - 278528 ) / 32;
      switch(data[16..17])
      {
      case "01":
         powerstate=1;
         break;
      case "00":
         powerstate=0;
      }
      clock();
      power_calibrate();
   }
   break;
   //Power Calibration Response
   case 39:
      sscanf(String.hex2string(data),"%4F%4F%4F%4F",gain_a,gain_b,offtot,offnoise);
   break;
   //Plug Clock Data Response (to 41) FIXME Check
   case 58:
   {
      int hour,minute,second,dow,dom,month,year;
      sscanf(data,"%2d%2d%2d%2d%2d%2d%2d",second,minute,hour,dow,dom,month,year);
      plugtime = Calendar.parse("%s-%m-%h-%e-%D-%M-%y",sprintf("%02d-%02d-%02d-%02d-%02d-%02d-%02d",second,minute,hour,dow,dom,month,year))->unix_time();;
#ifdef PW_PROTOCOL_DEBUG
      write("Plug Time: %d %d\n",plugtime,time(1)); 
#endif
   }
   break;
   //Plug Clock Data Response (to 62) FIXME Check
   case 63:
   {
      //I Suspect this is a logvalue for the software to set the last log-time.   
      int hour,minute,second,dow;
      sscanf(data[..7],"%2x%2x%2x%2x",hour,minute,second,dow);
      lasttime = Calendar.Second("unix", logclock)->set_timezone("GMT")->day()->hour(hour)->minute(minute)->second(second)->unix_time();
#ifdef PW_PROTOCOL_DEBUG
      write("Plug Time: %d %d\n",plugtime,time(1)); 
#endif
      /*FIXME should this be set in 58?
      if(abs(plugtime-time(1)) >= 60 )
      {
         mapping cdate = Calendar.now()->set_timezone("GMT")->datetime();
         int yr = cdate->year-2000;
         int month_minute = (cdate->day-1)*24*60+cdate->hour*60+cdate->minute;
         string towrite = sprintf("%02X%02X%04XFFFFFFFF%02X%02X%02X%02X",
                                  yr,cdate->month,month_minute,
                                  cdate->hour,cdate->minute,cdate->second,
                                  cdate->week_day);
         string data = Stick->send_command(mac, 22, towrite);
         //Re-read the plug clock
         info();
         clock();
      }
      */
   }
   break;
   //Powerlog Response
   case 73:
   {
      array x = array_sscanf(data,"%8s%8x%8s%8x%8s%8x%8s%8x%8x");
      int logaddress = (x[8] - 278528) / 32;
      array log = ({ ([ "hour":YMMtoUnix(x[0]),"pulses":pulse_correction(x[1],3600), "kwh": pulse_to_kwh(pulse_correction(x[3],3600)) ]), 
             ([ "hour":YMMtoUnix(x[2]),"pulses":pulse_correction(x[3],3600), "kwh": pulse_to_kwh(pulse_correction(x[3],3600) ) ]), 
             ([ "hour":YMMtoUnix(x[4]),"pulses":pulse_correction(x[5],3600), "kwh": pulse_to_kwh(pulse_correction(x[5],3600) ) ]), 
             ([ "hour":YMMtoUnix(x[6]),"pulses":pulse_correction(x[7],3600), "kwh": pulse_to_kwh(pulse_correction(x[7],3600) ) ]) });
      if( log_callback )
         log_callback( log, logaddress );
   }
   break;
   default:
   {
      werror("Received unknown command %d with data %O\n",command,data);
   }
   }
}

//! Returns the current powerload off the plug. 
//! @param pulses
//! when non-zero power returns the information in Pulses otherwise in Watt.
//!  Watt = Pulses * 1000 / 468.9385193
//! @returns
//! powerload in Pulses or Watt
float power( int|void pulses )
{
      send_command(mac, 18 );
      return pulses?pulse:pulse_to_watt(pulse);
}
} // End of Class Circle

protected class _CirclePlus
{
   inherit _Circle;

   constant type = CIRCLEPLUS;
   //! Connect to a Plug in the PlugWise network.
   //! Plugs have to be added to the network using the 
   //! Microsoft windows tool provide by PlugWise B.V.
   //! The Source.
   //! 
   //! @param port
   //! The Protocol object returned from
   //! earlier instantations of this PlugWise Network
   //! make sure to reuse the Protocol object if possible
   //! @param macaddress
   //! The mac address of the plug, either the 5 byte, 6 byte or
   //! full 16 byte mac works.
   void create(string macaddress, function _send_command )
   {
      mac = macaddress;
      send_command = _send_command;
      info();
      find_plugs();   
   }

   protected void FindNewPlugs(int|void timeout)
   {
      call_out(StopFindNewPlugs,timeout?timeout:300); 
      send_command("",8,"01");
   }

   protected void StopFindNewPlugs()
   {
      send_command("",8,"00");
   }

   //! Check if the Circle Is Registered
   //!
   void isregistered( string reg_mac )
   {
      send_command(mac, 28, reg_mac);
   }
   //! Find other Plugs in the Network
   //! Keep in mind this only works for the Circle+
   //!
   //! @returns
   //! array containing all found plugs. If non are found, or the plug is
   //! not a Circle+ an empty array is returned. 
   void find_plugs( string|void searchmac)
   {
      if( stringp(searchmac) )
      {
         send_command(mac, 28, searchmac);
         send_command(searchmac,35);
         return;
      }
      int count;
      array res=({});
      for(count = 0; count <= 0x3F; count++)
      {
         send_command(mac, 24,sprintf("%02X",count));
      }
   }
}

class _Switch
{

protected function send_command;
protected string mac;
int type = SWITCH;
int netfrequency =  0;

int Switch1 = 0;
int Switch2 = 0;

int builddate = 0;

int online = 0;

string hwversion="";

void close()
{
   destruct(this);
}

void create(string macaddress, function _send_command)
{
   mac = macaddress;
   send_command = _send_command;
   info();
}

void offline()
{
   online = 0;
}

//! Refresh the Plug info. No data is returned here, only the internal
//! representation of the Plug status like online,powerstate,time
//! net frequency and hardware version are recollected from the plug.
void info()
{
   send_command(mac, 35 );
} 


protected function switch_callback;

void set_switch_callback( function callback)
{
   switch_callback = callback;
}

protected array(mapping)  transmitqueue = ({});

protected void send_queue()
{
   foreach ( transmitqueue, mapping command )
   {
      send_command(mac,command->command, command->data);
   }
   transmitqueue = ({});
}

void set_wakeup_timer( int wakeup, int timeout )
{
   transmitqueue += ({ ([ "command":80,
                          "data":sprintf("%02X0001%04X000000",timeout,wakeup)
                       ]) });
}

void receive_callback(int command, string data )
{
   online = 1;
   switch( command )
   {
   //return code from info() command.
   case 36:
   {
      switch(data[18..19])
      {
      case "85":
         netfrequency=50;
         break;
      case "C5":
         netfrequency=60;
         break;
      default:
         netfrequency=0;
      }
      hwversion=data[20..31];
      sscanf(data[32..37],"%x",builddate);
      //Since we're online, we can now transfer data we cached
      send_queue();
   }
   break;
   //RF Wakeup Call
   case 79:
   {
      send_queue();
   }
   break;
   //Switch Pressed Broadcast
   case 86:
   {
      sscanf(data,"%2x%2x", int switchnr, int onoff);
      if( switchnr == 1)
         Switch1 = onoff;
      else
         Switch2 = onoff;
      if ( switch_callback )
         switch_callback(switchnr,onoff); 
   }
   break;
   default:
   {
      werror("Received unknown command %d with data %O\n",command,data);
   }
   }

}

} //End of Class _Switch

class _Sense
{
#define HUMOFFSET 3145
#define TEMPOFFSET 17473
#define HUMDIV 524.30
#define TEMPDIV 372.90

protected function send_command;
protected string mac;
int type = SWITCH;
int netfrequency =  0;
int builddate = 0;
string hwversion="";
int online = 0;
int Switch1 = 0;
float Humidity = 0.0;
float Temperature = 0.0;

//Pointerr to the address of the current log
protected int logpointer = 0;
//Address of the last log
int logaddress = 0;
protected function log_callback = 0;

void close()
{
   destruct(this);
}

void create(string macaddress, function _send_command)
{
   mac = macaddress;
   send_command = _send_command;
   info();
}

void offline()
{
   online = 0;
}

//! Refresh the Plug info. No data is returned here, only the internal
//! representation of the Plug status like online,powerstate,time
//! net frequency and hardware version are recollected from the plug.
void info()
{
   transmitqueue += ({ ([ "command":35,
                          "data":""
                       ]) });
} 

protected int YMMtoUnix(string YMM)
{
   //Format is Year_Month_MonthMinute
   int year, month, minutes;
   sscanf(YMM,"%2x%2x%4x",year,month,minutes);
   year+=2000;
   if(!month ||  month > 12 )
      return 0;
   return Calendar.Year(year)->set_timezone("GMT")->month(month)->minute(minutes)->unix_time();
}

//! @param addr
//! the logaddress  which needs to be queried. The current logaddress
//! is Plug->logaddress. This however points to the current not completed 
//! log.
void log( int|void addr)
{
   info();
   int log = zero_type(addr)?logpointer:addr;
   transmitqueue += ({ ([ "command":72,
                          "data":sprintf("%08X",(log*32+278528))
                       ]) });
} 

int log_pointer()
{
   info();
   return logpointer;
}

void set_log_callback( function callback )
{
   log_callback = callback;
}

void remove_log_callback()
{
   log_callback = 0;
}

protected function switch_callback;

void set_switch_callback( function callback)
{
   switch_callback = callback;
}

protected array(mapping)  transmitqueue = ({});

protected void send_queue()
{
   foreach ( transmitqueue, mapping command )
   {
      send_command(mac,command->command, command->data);
   }
   transmitqueue = ({});
}

void set_wakeup_timer( int wakeup, int timeout )
{
   transmitqueue += ({ ([ "command":80,
                          "data":sprintf("%02X0001%04X000000",timeout,wakeup)
                       ]) });
}

void set_temperature_switch ( float low, float high, int interval )
{
   transmitqueue += ({ ([ "command":259,
                          "data":sprintf("%2X",(int) interval)
                       ]), 
                       ([ "command":260,
                          "data":sprintf("01%04X01%04X00",(int) (low*TEMPDIV)+TEMPOFFSET,(int) (high*372.90)+17473)
                       ]) });

}


void set_humidity_switch ( float low, float high, int interval )
{
   transmitqueue += ({ ([ "command":259,
                          "data":sprintf("%2X",(int) interval)
                       ]), 
                       ([ "command":260,
                          "data":sprintf("00%04X01%04X00",(int) (low*HUMDIV)+HUMOFFSET,(int) (high*524.30)+3145)
                       ]) 
                       });
}

void receive_callback(int command, string data )
{
   online = 1;
   switch( command )
   {
   //return code from info() command.
   case 36:
   {
      switch(data[18..19])
      {
      case "85":
         netfrequency=50;
         break;
      case "C5":
         netfrequency=60;
         break;
      default:
         netfrequency=0;
      }
      hwversion=data[20..31];
      sscanf(data[32..37],"%x",builddate);
      //Since we're online, we can now transfer data we cached
      send_queue();
   }
   break;
   //log Response
   case 73:
   {
      array x = array_sscanf(data,"%8s%4x%4x%8s%4x%4x%8s%4x%4x%8s%4x%4x%8x");
      int logaddress = (x[12] - 278528) / 32;
      array log = ({ 
                     ([ "hour":YMMtoUnix(x[0]),
                        "humidity": (x[1]-HUMOFFSET)/HUMDIV,
                        "temperature": (x[2]-TEMPOFFSET)/TEMPDIV ]), 
                     ([ "hour":YMMtoUnix(x[3]),
                        "humidity": (x[4]-HUMOFFSET)/HUMDIV,
                        "temperature": (x[5]-TEMPOFFSET)/TEMPDIV ]), 
                     ([ "hour":YMMtoUnix(x[6]),
                        "humidity": (x[7]-HUMOFFSET)/HUMDIV,
                        "temperature": (x[8]-TEMPOFFSET)/TEMPDIV ]), 
                     ([ "hour":YMMtoUnix(x[9]),
                        "humidity": (x[10]-HUMOFFSET)/HUMDIV,
                        "temperature": (x[11]-TEMPOFFSET)/TEMPDIV ]), 
                  });
      if( log_callback )
         log_callback( log, logaddress );
   }
   break;
   //RF Wakeup Call
   case 79:
   {
      send_queue();
   }
   break;
   //Sense Switch Broadcast
   case 86:
   {
      sscanf(data,"%2x%2x", int switchnr, int onoff);
      if ( switch_callback )
         switch_callback(switchnr,onoff); 
      Switch1 = onoff;
   }
   break;
   //Acknowledge of some sort not sure
   case 256:
   {
      //Data is mostly 00B3 or 00B5 not sure what to do with it.
   }
   break;
   //Scan Data
   case 261:
   {
      sscanf(data,"%4x%4x",int hum,int temp);
      Humidity = (hum - HUMOFFSET) / HUMDIV;
      Temperature = (temp - TEMPOFFSET ) / TEMPDIV;
   }
   break;
   default:
   {
      werror("Received unknown command %d with data %O\n",command,data);
   }
   }

}

} //End of Class _Sense

protected class _Scan
{

protected function send_command;
protected string mac;
int type = SWITCH;
int netfrequency =  0;
string hwversion="";
int builddate = 0;
int online = 0;
int Switch1 = 0;

void close()
{
   destruct(this);
}

void create(string macaddress, function _send_command)
{
   mac = macaddress;
   send_command = _send_command;
   info();
}

void offline()
{
   online = 0;
}

//! Refresh the Plug info. No data is returned here, only the internal
//! representation of the Plug status like online,powerstate,time
//! net frequency and hardware version are recollected from the plug.
void info()
{
   transmitqueue += ({ ([ "command":35,
                          "data":""
                       ]) });
} 


protected array(mapping)  transmitqueue = ({});

protected function switch_callback;

void set_switch_callback( function callback)
{
   switch_callback = callback;
}

protected void send_queue()
{
   foreach ( transmitqueue, mapping command )
   {
      send_command(mac,command->command, command->data);
   }
   transmitqueue = ({});
}

void set_wakeup_timer( int wakeup, int timeout )
{
   transmitqueue += ({ ([ "command":80,
                          "data":sprintf("%02X0001%04X000000",timeout,wakeup)
                       ]) });
}

void receive_callback(int command, string data )
{
   online = 1;
   switch( command )
   {
   //return code from info() command.
   case 36:
   {
      switch(data[18..19])
      {
      case "85":
         netfrequency=50;
         break;
      case "C5":
         netfrequency=60;
         break;
      default:
         netfrequency=0;
      }
      hwversion=data[20..31];
      sscanf(data[32..37],"%x",builddate);
      //Since we're online, we can now transfer data we cached
      send_queue();
   }
   break;
   //RF Wakeup Call
   case 79:
   {
      send_queue();
   }
   break;
   case 86:
   {
      sscanf(data,"%2x%2x", int switchnr, int onoff);
      if ( switch_callback )
         switch_callback(switchnr,onoff); 
      Switch1 = onoff;
   }
   break;
   default:
   {
      werror("Received unknown command %d with data %O\n",command,data);
   }
   }

}

} //End of Class _Switch
